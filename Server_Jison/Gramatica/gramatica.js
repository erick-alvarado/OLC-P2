/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,15],$V4=[1,37],$V5=[1,36],$V6=[1,44],$V7=[1,32],$V8=[1,33],$V9=[1,34],$Va=[1,43],$Vb=[1,45],$Vc=[1,46],$Vd=[1,47],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[2,5,7,9,16,34,35,36,43,49,50,51,52,53,54,55,56,58,59],$Vk=[7,9,16,34,35,36,43,49,50,51,52,53,54,55,56,59],$Vl=[1,61],$Vm=[1,59],$Vn=[1,58],$Vo=[1,56],$Vp=[1,57],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,70],$Vx=[1,71],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[19,25,44,64,65,66,67,68,69,70,71,72,74,75,76],$VL=[2,85],$VM=[1,104],$VN=[19,25,44,72,74,75,76],$VO=[7,9,15,16,34,35,36,43,49,50,51,52,53,54,55,56,59,65,73,77,80,81,82,83,84,85],$VP=[1,127],$VQ=[19,44],$VR=[19,25,44,64,65,68,69,70,71,72,74,75,76],$VS=[19,25,44,68,69,70,71,72,74,75,76],$VT=[1,162];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"CLASES":4,"EOF":5,"CLASE":6,"public_":7,"class_":8,"identificador":9,"BLOQUE_SENTENCIAS":10,"interface_":11,"static_":12,"void_":13,"main_":14,"parAbre":15,"string_":16,"corchetes":17,"args_":18,"parCierra":19,"INSTRUCCIONES":20,"INSTRUCCION":21,"DECLARACION":22,"ASIGNACION":23,"INCRE_DECRE":24,"pcoma":25,"FUNCION_CLASE":26,"FUNCION_INTERFACE":27,"LLAMADA":28,"WHILE":29,"DO_WHILE":30,"FOR":31,"IF":32,"PRINT":33,"break_":34,"continue_":35,"return_":36,"EXPRESION":37,"mas_mas":38,"menos_menos":39,"TIPO":40,"PARAMETROS":41,"llaveAbre":42,"llaveCierra":43,"coma":44,"PARAMETRO":45,"DECLARA":46,"igual":47,"PRIMITIVOS":48,"numeric_":49,"boolean_":50,"double_":51,"char_":52,"while_":53,"do_":54,"for_":55,"if_":56,"ELSE":57,"else_":58,"system_":59,"punto":60,"out_":61,"print_":62,"println_":63,"mas":64,"menos":65,"por":66,"division":67,"mayorQ_igual":68,"mayorQ":69,"menorQ_igual":70,"menorQ":71,"igual_igual":72,"distinto":73,"or_":74,"and_":75,"xor_":76,"not_":77,"EXP":78,"PRIMITIVO":79,"decimal":80,"entero":81,"caracter":82,"cadena":83,"true_":84,"false_":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"public_",8:"class_",9:"identificador",11:"interface_",12:"static_",13:"void_",14:"main_",15:"parAbre",16:"string_",17:"corchetes",18:"args_",19:"parCierra",25:"pcoma",34:"break_",35:"continue_",36:"return_",38:"mas_mas",39:"menos_menos",42:"llaveAbre",43:"llaveCierra",44:"coma",47:"igual",49:"numeric_",50:"boolean_",51:"double_",52:"char_",53:"while_",54:"do_",55:"for_",56:"if_",58:"else_",59:"system_",60:"punto",61:"out_",62:"print_",63:"println_",64:"mas",65:"menos",66:"por",67:"division",68:"mayorQ_igual",69:"mayorQ",70:"menorQ_igual",71:"menorQ",72:"igual_igual",73:"distinto",74:"or_",75:"and_",76:"xor_",77:"not_",78:"EXP",80:"decimal",81:"entero",82:"caracter",83:"cadena",84:"true_",85:"false_"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,10],[6,1],[20,2],[20,1],[21,1],[21,1],[21,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,2],[21,2],[21,3],[24,2],[24,2],[26,7],[26,7],[27,7],[27,7],[10,2],[10,3],[41,3],[41,1],[45,2],[22,3],[22,5],[22,5],[22,7],[46,3],[46,5],[46,3],[46,1],[28,5],[40,1],[40,1],[40,1],[40,1],[40,1],[23,4],[29,5],[30,7],[31,8],[32,6],[32,5],[57,2],[57,2],[33,9],[33,9],[37,3],[37,3],[37,3],[37,3],[37,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,2],[37,2],[37,3],[37,1],[48,3],[48,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		root.setInstruccion($$[$0-1]);
		let aux = root
		root = new AST(null, [] , [] );
		return aux; 
	
break;
case 2: case 8:

		$$[$0-1].push($$[$0]);
		this.$ = $$[$0-1];
	  
break;
case 3:

		this.$ = [$$[$0]];
	
	
break;
case 4:
 this.$= new Clase($$[$0-1],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 5:
 this.$= new Interface($$[$0-1],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 6:
 this.$= new Main(null,$$[$0], this._$.first_line, this._$.first_column); 
break;
case 7:

		root.addError(new Error_("SINTACTICO",this._$.first_line, this._$.first_column, yytext));
		this.$ = new ParaQueNoTruene(0,0);		
	
break;
case 9: case 33: case 78:

		this.$ = [$$[$0]];
	
break;
case 10:
 this.$ = $$[$0];
break;
case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 63: case 76:
 this.$ = $$[$0]; 
break;
case 12: case 31:
 this.$ = $$[$0-1]; 
break;
case 21: case 22:
 this.$= new Sentencia($$[$0-1], null,this._$.first_line, this._$.first_column); 
break;
case 23:
 this.$= new Sentencia($$[$0-2], $$[$0-1],this._$.first_line, this._$.first_column); 
break;
case 24:
 this.$ = new Incre_Decre( $$[$0-1],TypeOperation.ADICION,  this._$.first_line, this._$.first_column); 
break;
case 25:
 this.$ = new Incre_Decre( $$[$0-1],TypeOperation.SUBSTRACCION,  this._$.first_line, this._$.first_column); 
break;
case 26: case 27:
 this.$= new Funcion_Clase($$[$0-5], $$[$0-4], $$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 28: case 29:
 this.$= new Funcion_Interface($$[$0-5], $$[$0-4], $$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 30:
 this.$ = new ParaQueNoTruene( this._$.first_line, this._$.first_column); 
break;
case 32: case 77:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	  
break;
case 34:
  this.$= new Parametro($$[$0-1], $$[$0],this._$.first_line, this._$.first_column); 
break;
case 35:
 this.$= new Declaracion($$[$0-2], $$[$0-1], null,null, this._$.first_line, this._$.first_column); 
break;
case 36:
 this.$= new Declaracion($$[$0-4], $$[$0-3], null,$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 37:
 this.$= new Declaracion($$[$0-4], $$[$0-3], $$[$0-1],null, this._$.first_line, this._$.first_column); 
break;
case 38:
 this.$= new Declaracion($$[$0-6], $$[$0-5], $$[$0-3],$$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 39:
 this.$= new Declaracion(Type.COMA, $$[$0-2], $$[$0] ,null, this._$.first_line, this._$.first_column); 
break;
case 40:
 this.$= new Declaracion(Type.COMA, $$[$0-4], $$[$0-2] ,$$[$0], this._$.first_line, this._$.first_column); 
break;
case 41:
 this.$= new Declaracion(Type.COMA, $$[$0-2],null,$$[$0], this._$.first_line, this._$.first_column); 
break;
case 42:
 this.$= new Declaracion(Type.COMA, $$[$0], null,null, this._$.first_line, this._$.first_column); 
break;
case 43:
 this.$= new Llamada($$[$0-4], $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 44:
 this.$ = Type.NUMERIC; 
break;
case 45:
 this.$ = Type.STRING; 
break;
case 46:
 this.$ = Type.BOOLEAN; 
break;
case 47:
 this.$ = Type.DOUBLE; 
break;
case 48:
 this.$ = Type.CHAR; 
break;
case 49:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column); 
break;
case 50:
 this.$ = new While($$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new DoWhile($$[$0-2], $$[$0-5], this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = new If($$[$0-3],$$[$0-1],$$[$0], this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = new If($$[$0-2], $$[$0],null, this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = new Else(null, $$[$0], this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = new Else($$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 57: case 58:
 this.$ = new Print( $$[$0-2], this._$.first_line, this._$.first_column); 
break;
case 59:
 this.$ = new OperacionAritmetica( TypeOperation.SUMA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = new OperacionAritmetica( TypeOperation.RESTA, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = new OperacionAritmetica( TypeOperation.MULTIPLICACION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 62:
 this.$ = new OperacionAritmetica( TypeOperation.DIVISION, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 64:
 this.$ = new OperacionRelacional( TypeOperation.MAYOR_IGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 65:
 this.$ = new OperacionRelacional( TypeOperation.MAYOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new OperacionRelacional( TypeOperation.MENOR_IGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new OperacionRelacional( TypeOperation.MENOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 68:
 this.$ = new OperacionRelacional( TypeOperation.IGUAL_IGUAL, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 69:
 this.$ = new OperacionRelacional( TypeOperation.DISTINTO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = new OperacionLogica( TypeOperation.OR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 71:
 this.$ = new OperacionLogica( TypeOperation.AND, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 72:
 this.$ = new OperacionLogica( TypeOperation.XOR, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column); 
break;
case 73:
 this.$ = new OperacionLogica( TypeOperation.NOT, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 74:
 this.$ = new OperacionAritmetica( TypeOperation.MENOSUNARIO, $$[$0], null, this._$.first_line, this._$.first_column); 
break;
case 75:
 this.$ = new OperacionAritmetica( TypeOperation.PARENTESIS, $$[$0-1], null, this._$.first_line, this._$.first_column); 
break;
case 79: case 80: case 81: case 82:
 this.$ = new Primitivo( $$[$0], this._$.first_line, this._$.first_column); 
break;
case 83:
 this.$ = new Primitivo( true, this._$.first_line, this._$.first_column); 
break;
case 84:
 this.$ = new Primitivo( false, this._$.first_line, this._$.first_column); 
break;
case 85:
 this.$ = new Identificador( $$[$0], this._$.first_line, this._$.first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],11:[1,9],12:[1,10]},o($V2,[2,7]),{1:[2,1]},o($V2,[2,2]),{9:[1,11]},{9:[1,12]},{13:[1,13]},{10:14,42:$V3},{10:16,42:$V3},{14:[1,17]},o($V2,[2,4]),{7:$V4,9:$V5,16:$V6,20:19,21:20,22:21,23:22,24:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:$V7,35:$V8,36:$V9,40:35,43:[1,18],49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,59:$Vi},o($V2,[2,5]),{15:[1,48]},o($Vj,[2,30]),{7:$V4,9:$V5,16:$V6,21:50,22:21,23:22,24:23,26:24,27:25,28:26,29:27,30:28,31:29,32:30,33:31,34:$V7,35:$V8,36:$V9,40:35,43:[1,49],49:$Va,50:$Vb,51:$Vc,52:$Vd,53:$Ve,54:$Vf,55:$Vg,56:$Vh,59:$Vi},o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),{25:[1,51]},o($Vk,[2,13]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,19]),o($Vk,[2,20]),{25:[1,52]},{25:[1,53]},{9:$Vl,15:$Vm,24:55,37:54,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:[1,68]},{15:[1,72],38:$Vw,39:$Vx,47:[1,69]},{13:[1,74],16:$V6,40:73,49:$Va,50:$Vb,51:$Vc,52:$Vd},{15:[1,75]},{10:76,42:$V3},{15:[1,77]},{15:[1,78]},{60:[1,79]},{9:[2,44]},{9:[2,45]},{9:[2,46]},{9:[2,47]},{9:[2,48]},{16:[1,80]},o($Vj,[2,31]),o($Vk,[2,8]),o($Vk,[2,12]),o($Vk,[2,21]),o($Vk,[2,22]),{25:[1,81],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},o($VK,[2,63]),{9:$Vl,15:$Vm,24:55,37:94,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:95,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{78:[1,96]},{9:$Vl,15:$Vm,24:55,37:97,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},o($VK,[2,76]),o($VK,$VL,{38:$Vw,39:$Vx}),o($VK,[2,79]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),{25:[1,98],44:[1,99],47:[1,100]},{9:$Vl,15:$Vm,24:55,37:101,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},o($VK,[2,24]),o($VK,[2,25]),{9:$VM,48:102,79:103,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:[1,105]},{9:[1,106]},{9:$Vl,15:$Vm,24:55,37:107,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{53:[1,108]},{16:$V6,22:109,40:35,49:$Va,50:$Vb,51:$Vc,52:$Vd},{9:$Vl,15:$Vm,24:55,37:110,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{61:[1,111]},{17:[1,112]},o($Vk,[2,23]),{9:$Vl,15:$Vm,24:55,37:113,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:114,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:115,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:116,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:117,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:118,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:119,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:120,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:121,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:122,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:123,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:124,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},o($VN,[2,69],{64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VK,[2,73]),o($VK,[2,74]),{19:[1,125],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},o($VO,[2,35]),{9:$VP,46:126},{9:$Vl,15:$Vm,24:55,37:128,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{25:[1,129],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{19:[1,130],44:[1,131]},o($VQ,[2,78]),o($VQ,$VL),{15:[1,132]},{15:[1,133]},{19:[1,134],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{15:[1,135]},{9:$Vl,15:$Vm,24:55,37:136,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{19:[1,137],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{60:[1,138]},{18:[1,139]},o($VR,[2,59],{66:$VA,67:$VB}),o($VR,[2,60],{66:$VA,67:$VB}),o($VK,[2,61]),o($VK,[2,62]),o($VS,[2,64],{64:$Vy,65:$Vz,66:$VA,67:$VB}),o($VS,[2,65],{64:$Vy,65:$Vz,66:$VA,67:$VB}),o($VS,[2,66],{64:$Vy,65:$Vz,66:$VA,67:$VB}),o($VS,[2,67],{64:$Vy,65:$Vz,66:$VA,67:$VB}),o($VN,[2,68],{64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o([19,25,44,74],[2,70],{64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,75:$VI,76:$VJ}),o([19,25,44,74,75],[2,71],{64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,76:$VJ}),o([19,25,44,74,75,76],[2,72],{64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG}),o($VK,[2,75]),{25:[1,140]},{25:[2,42],44:[1,142],47:[1,141]},{25:[1,143],44:[1,144],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},o($Vk,[2,49]),{25:[1,145]},{9:$VM,79:146,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{16:$V6,40:149,41:147,45:148,49:$Va,50:$Vb,51:$Vc,52:$Vd},{16:$V6,40:149,41:150,45:148,49:$Va,50:$Vb,51:$Vc,52:$Vd},{10:151,42:$V3},{9:$Vl,15:$Vm,24:55,37:152,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{25:[1,153],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{10:154,42:$V3},{62:[1,155],63:[1,156]},{19:[1,157]},o($VO,[2,36]),{9:$Vl,15:$Vm,24:55,37:158,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$VP,46:159},o($VO,[2,37]),{9:$VP,46:160},o($Vk,[2,43]),o($VQ,[2,77]),{19:[1,161],44:$VT},o($VQ,[2,33]),{9:[1,163]},{19:[1,164],44:$VT},o($Vk,[2,50]),{19:[1,165],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{9:$Vl,15:$Vm,24:55,37:166,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},o($Vk,[2,54],{57:167,58:[1,168]}),{15:[1,169]},{15:[1,170]},{10:171,42:$V3},{25:[2,39],44:[1,172],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{25:[2,41]},{25:[1,173]},{10:174,25:[1,175],42:$V3},{16:$V6,40:149,45:176,49:$Va,50:$Vb,51:$Vc,52:$Vd},o($VQ,[2,34]),{10:177,25:[1,178],42:$V3},{25:[1,179]},{19:[1,180],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},o($Vk,[2,53]),{10:181,32:182,42:$V3,56:$Vh},{9:$Vl,15:$Vm,24:55,37:183,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},{9:$Vl,15:$Vm,24:55,37:184,65:$Vn,73:$Vo,77:$Vp,79:60,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv},o($V2,[2,6]),{9:$VP,46:185},o($VO,[2,38]),o($Vk,[2,26]),o($Vk,[2,28]),o($VQ,[2,32]),o($Vk,[2,27]),o($Vk,[2,29]),o($Vk,[2,51]),{10:186,42:$V3},o($Vk,[2,55]),o($Vk,[2,56]),{19:[1,187],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{19:[1,188],64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF,72:$VG,74:$VH,75:$VI,76:$VJ},{25:[2,40]},o($Vk,[2,52]),{25:[1,189]},{25:[1,190]},o($Vk,[2,57]),o($Vk,[2,58])],
defaultActions: {6:[2,1],43:[2,44],44:[2,45],45:[2,46],46:[2,47],47:[2,48],159:[2,41],185:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const { Instruccion } = require("../dist/ast/Instruccion");
	const { Error_ } = require("../dist/ast/Error_");
	const { ParaQueNoTruene } = require("../dist/ast/ParaQueNoTruene");
	const { Token } = require("../dist/ast/Token");
	const { AST } = require("../dist/ast/AST");
	const { Asignacion } = require("../dist/ast/instrucciones/Asignacion");
	const { Sentencia } = require("../dist/ast/instrucciones/Sentencia");
	const { Declaracion } = require("../dist/ast/instrucciones/Declaracion");
	const { Print } = require("../dist/ast/instrucciones/Print");
	const { While } = require("../dist/ast/instrucciones/While");
	const { DoWhile } = require("../dist/ast/instrucciones/DoWhile");
	const { Llamada } = require("../dist/ast/instrucciones/Llamada");
	const { For } = require("../dist/ast/instrucciones/For");
	const { Incre_Decre } = require("../dist/ast/instrucciones/Incre_Decre");

	const { OperacionAritmetica } = require("../dist/ast/expresiones/OperacionAritmetica");
	const { OperacionLogica } = require("../dist/ast/expresiones/OperacionLogica");
	const { OperacionRelacional } = require("../dist/ast/expresiones/OperacionRelacional");
	const { Identificador } = require("../dist/ast/expresiones/Identificador");
	const { Primitivo } = require("../dist/ast/expresiones/Primitivo");
	const { Type } = require("../dist/ast/Tipo");
	const { TypeOperation } = require("../dist/ast/Tipo");
	const { Clase } = require("../dist/ast/clases/Clase");
	const { Interface } = require("../dist/ast/clases/interface");
	const { Main } = require("../dist/ast/clases/Main");
	const { Parametro } = require("../dist/ast/instrucciones/Parametro");
	const { If } = require("../dist/ast/instrucciones/If");
	const { Else } = require("../dist/ast/instrucciones/Else");
	const { Funcion_Clase } = require("../dist/ast/funciones/Funcion_Clase");
	const { Funcion_Interface } = require("../dist/ast/funciones/Funcion_Interface");
	var root = new AST(null, [] , [] );
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://ignorando los espacios en blanco
break;
case 1:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "Comentario", yy_.yytext)); 
break;
case 2:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "Comentario multilinea", yy_.yytext)); 
break;
case 3:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "numeric_", yy_.yytext)); return 49; 
break;
case 4:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "string_", yy_.yytext)); return 16; 
break;
case 5:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "char_", yy_.yytext)); return 52; 
break;
case 6:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "boolean_", yy_.yytext)); return 50; 
break;
case 7:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "double_", yy_.yytext)); return 51; 
break;
case 8:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "for_", yy_.yytext)); return 55; 
break;
case 9:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "do_", yy_.yytext)); return 54; 
break;
case 10:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "while_", yy_.yytext)); return 53; 
break;
case 11:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "if_", yy_.yytext)); return 56;
break;
case 12:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "else_", yy_.yytext)); return 58;
break;
case 13:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "break_", yy_.yytext)); return 34;
break;
case 14:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "return_", yy_.yytext)); return 36;
break;
case 15:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "continue_", yy_.yytext)); return 35;
break;
case 16:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "public_", yy_.yytext)); return 7;
break;
case 17:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "class_", yy_.yytext)); return 8;
break;
case 18:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "interface_", yy_.yytext)); return 11;
break;
case 19:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "void_", yy_.yytext)); return 13;
break;
case 20:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "static_", yy_.yytext)); return 12;
break;
case 21:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "main_", yy_.yytext)); return 14;
break;
case 22:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "args_", yy_.yytext)); return 18;
break;
case 23:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "system_", yy_.yytext)); return 59;
break;
case 24:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "out_", yy_.yytext)); return 61;
break;
case 25:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "print_", yy_.yytext)); return 62;
break;
case 26:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "println_", yy_.yytext)); return 63;
break;
case 27:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "igual_igual", yy_.yytext)); return 72;
break;
case 28:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "mas_mas", yy_.yytext)); return 38;
break;
case 29:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "menos_menos", yy_.yytext)); return 39;
break;
case 30:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "distinto", yy_.yytext)); return 73;
break;
case 31:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "and_", yy_.yytext)); return 75;
break;
case 32:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "menorQ_igual", yy_.yytext)); return 70;
break;
case 33:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "mayorQ_igual", yy_.yytext)); return 68;
break;
case 34:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "or_", yy_.yytext)); return 74;
break;
case 35:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "igual", yy_.yytext)); return 47;
break;
case 36:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "coma", yy_.yytext)); return 44;
break;
case 37:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "corchetes", yy_.yytext)); return 17;
break;
case 38:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "pcoma", yy_.yytext)); return 25;
break;
case 39:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "llaveAbre", yy_.yytext)); return 42;
break;
case 40:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "llaveCierra", yy_.yytext)); return 43;
break;
case 41:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "punto", yy_.yytext)); return 60;
break;
case 42:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "mas", yy_.yytext)); return 64;
break;
case 43:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "menos", yy_.yytext)); return 65;
break;
case 44:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "por", yy_.yytext)); return 66;
break;
case 45:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "division", yy_.yytext)); return 67;
break;
case 46:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "parAbre", yy_.yytext)); return 15;
break;
case 47:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "parCierra", yy_.yytext)); return 19;
break;
case 48:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "menorQ", yy_.yytext)); return 71;
break;
case 49:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "mayorQ", yy_.yytext)); return 69;
break;
case 50:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "not_", yy_.yytext)); return 77;
break;
case 51:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "xor_", yy_.yytext)); return 76;
break;
case 52:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "true_", yy_.yytext)); return 84;
break;
case 53:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "false_", yy_.yytext)); return 85;
break;
case 54:  root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "caracter", yy_.yytext)); return 82; 
break;
case 55: root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "cadena", yy_.yytext)); return 83; /*//"*/ 
break;
case 56:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "decimal", yy_.yytext)); return 80;
break;
case 57:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "entero", yy_.yytext)); return 81;
break;
case 58:root.addToken(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column, "identificador", yy_.yytext)); return 9;
break;
case 59:
break;
case 60:
break;
case 61:return 5;
break;
case 62: 
		root.addError(new Error_("LEXICO",yy_.yylloc.first_line, yy_.yylloc.first_column, "El caracter: ' " +yy_.yytext+" ' no pertenece al lenguaje"));

	
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:system\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\[\])/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\.)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\^)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:'([^\\\"]|\\.)')/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}